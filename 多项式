#include<stdio.h>
int main()
{
    int i=0,j,x,y;
    int a[1000],b[1000];
    while(1){
        scanf("%d %d",&x,&y);
        if(y!=0){
            a[i]=x*y;
            b[i]=y-1;
            i++;
        }
        if(getchar()=='\n') break;
    }
    if(i==0){
        printf("0 0\n");
    }
    for(j=0;j<i;j++){
        printf("%d %d",a[j],b[j]);
        if(j<i-1) printf(" ");
    }
    return 0;
}
//一元多项式求导 


#include <stdio.h>
#include <stdlib.h>
 struct node
{
    int data;
    int count;
}s[100001];
int main()
{
    int n,i,j;
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        scanf("%d",&s[i].data);
        s[i].count=1;
    }
    for(i=0;i<n;i++)
    {
        for(j=i+1;j<n+1;j++)
        {
            if(s[j].data>s[j-1].data)
                s[i].count++;
            else
                break;
        }
    }
    int sum=0,t,z;
    for(i=0;i<n;i++)
    {
        if(sum<s[i].count)
            {sum=s[i].count;
            t=i;}
    }

    for(z=t;z<sum+t-1;z++)
    {
        printf("%d ",s[z].data);
    }
     printf("%d",s[z].data);
     return 0;
}
//最长连续递增子序列


#include <stdio.h>
#include <stdlib.h> 
#define N 10000
int main()
{
     int a[N] = {0};
     int b[N] = {0};
     int c[N] = {0};  //求积
     int d[N] = {0};  //求和
     int i ,j;
     int x,z ; //系数  指数
     int cnt=0;
 
     scanf("%d",&i);  //读入第一个单项式
     while( i-- ){
         scanf("%d %d",&x,&z);
         a[z] += x;   //指数为z的系数放在z位置上
     }
 
     scanf("%d",&i);  //读入第二个单项式
     while( i-- ){
         scanf("%d %d",&x,&z);
         b[z] += x;
     }
 
     //多项式乘法
     for( i=N-1; i>=0; i--){ 
         if( a[i] ){
             for( j=0; j<N; j++){
                 if( b[j]){
                     c[ i+j ] += a[i]*b[j];
                 }
             }
         }
     }
 
    //输出多项式乘法结果
     for( i=N-1; i>=0; i--){
 
         if( c[i] ){
             if( cnt ){
                 //处理结尾不能有多余空格
                 printf(" ");
             }
             printf("%d %d",c[i],i);
             cnt++;
         }
     }
     if( !cnt ){
         printf("0 0");
     }
     printf("\n");

     //多项式加法
     for( i=N-1; i>=0; i--){
         if( a[i]){
             d[i] += a[i];
        }
     }
    for( j=N-1; j>=0; j--){
         if( b[j]){
            d[j] += b[j];
         }
     }
 
     //输出多项式加法结果
     cnt = 0;
     for( i=N-1; i>=0; i--){
         if( d[i] ){
            if( cnt ){
               printf(" ");
            }
            printf("%d %d",d[i],i);
            cnt++;
        }
     }
     if(!cnt){
        printf("0 0");
     }
    return 0;
}
//一元多项式的乘法与加法运算


#include<stdio.h>
#include<math.h>
double a[100000],b[100000],c[100000];
int main()
{
    int i,j,n,m,k,t,l,Ma,Mb,numa=0,numb=0;
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        scanf("%d",&m);
        scanf("%lf",&a[m]);
        if(i==0)
            Ma=m;
    }
    scanf("%d",&l);
    for(i=0;i<l;i++)
    {
        scanf("%d",&m);
        scanf("%lf",&b[m]);
        if(i==0)
            Mb=m;
    }
    //printf("%d %d\n",Ma,Mb);
    for(i=Ma;i>=Mb;i--)
    {
        c[i-Mb]=a[i]/b[Mb];
        for(j=Mb;j>=0;j--)
        {
            a[i+j-Mb]-=b[j]*c[i-Mb];
        }
    }
    for(i=Ma-Mb;i>=0;i--)
    {
        if(fabs(c[i])>1e-6)
        {
            if(fabs(c[i])<0.05)
            {
                c[i]=0;
            }
            else
            {
                numa++;
            }
        }
    }
    for(i=Mb-1;i>=0;i--)
    {
        if(fabs(a[i])>1e-6)
        {
            if(fabs(a[i])<0.05)
            {
                a[i]=0;
            }
            else
            {
                numb++;
            }
        }
    }
    if(numa==0)
    {
        printf("0 0 0.0\n");
    }
    else
    {
        printf("%d",numa);
        for(i=Ma-Mb;i>=0;i--)
        {
            if(fabs(c[i])>1e-6)
            {
                printf(" %d %.1lf",i,c[i]);
            }
        }
        printf("\n");
    }
 
    if(numb==0)
    {
        printf("0 0 0.0\n");
    }
    else
    {
        printf("%d",numb);
        for(i=Mb-1;i>=0;i--)
        {
            if(fabs(a[i])>1e-6)
            {
                printf(" %d %.1lf",i,a[i]);
            }
        }
        printf("\n");
    }
    return 0;
}
//多项式A除以B
